/* Question 3: MongoDB Aggregation Consider a MongoDB collection named sales with documents
structured as follows:

{
  "_id": ObjectId("..."),
  "date": ISODate("2024-06-15T00:00:00Z"),
  "store": "Store A",
  "items": [
    {
      "name": "item1",
      "quantity": 5,
      "price": 10.0
    },
    {
      "name": "item2",
      "quantity": 3,
      "price": 20.0
    }
  ]
}

Write an aggregation pipeline to calculate the total revenue generated by each store for each month, along with the average price of items sold. The result should be sorted first by store and then by month (in ascending order). */


/* Ans:
Here is my steps to write aggregation pipeline -

1. Flattens the items array by using $unwind operator, so each sale item can be processed individually
2. Transform the structure of the document by using $project operator
3. Group by store and month to accumulate total revenue and average price by using $group operator
4. Now re-shape of the document by using $project operator
5. Finally, result is sorted first by store and then by month (in ascending order by assigning value 1) */


db.sales.aggregate([
  { 
    $unwind: "$items"
  },
  {
    $project: {
      store: 1,
      month: { $dateToString: { format: "%Y-%m", date: "$date" } },
      revenue: { $multiply: [ "$items.quantity", "$items.price" ] },
      price: "$items.price"
    }
  },
  {
    $group: {
      _id: {
        store: "$store",
        month: "$month"
      },
      totalRevenue: { $sum: "$revenue" },
      averagePrice: { $avg: "$price" }
    }
  },
  {
    $project: {
      _id: 0,
      store: "$_id.store",
      month: "$_id.month",
      totalRevenue: 1,
      averagePrice: 1
    }
  },
  {
    $sort: {
      store: 1,
      month: 1
    }
  }
])
